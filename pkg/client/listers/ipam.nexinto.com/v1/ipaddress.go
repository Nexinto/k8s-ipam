/*
Copyright 2018 Nexinto

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/Nexinto/k8s-ipam/pkg/apis/ipam.nexinto.com/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IpAddressLister helps list IpAddresses.
type IpAddressLister interface {
	// List lists all IpAddresses in the indexer.
	List(selector labels.Selector) (ret []*v1.IpAddress, err error)
	// IpAddresses returns an object that can list and get IpAddresses.
	IpAddresses(namespace string) IpAddressNamespaceLister
	IpAddressListerExpansion
}

// ipAddressLister implements the IpAddressLister interface.
type ipAddressLister struct {
	indexer cache.Indexer
}

// NewIpAddressLister returns a new IpAddressLister.
func NewIpAddressLister(indexer cache.Indexer) IpAddressLister {
	return &ipAddressLister{indexer: indexer}
}

// List lists all IpAddresses in the indexer.
func (s *ipAddressLister) List(selector labels.Selector) (ret []*v1.IpAddress, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.IpAddress))
	})
	return ret, err
}

// IpAddresses returns an object that can list and get IpAddresses.
func (s *ipAddressLister) IpAddresses(namespace string) IpAddressNamespaceLister {
	return ipAddressNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IpAddressNamespaceLister helps list and get IpAddresses.
type IpAddressNamespaceLister interface {
	// List lists all IpAddresses in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.IpAddress, err error)
	// Get retrieves the IpAddress from the indexer for a given namespace and name.
	Get(name string) (*v1.IpAddress, error)
	IpAddressNamespaceListerExpansion
}

// ipAddressNamespaceLister implements the IpAddressNamespaceLister
// interface.
type ipAddressNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IpAddresses in the indexer for a given namespace.
func (s ipAddressNamespaceLister) List(selector labels.Selector) (ret []*v1.IpAddress, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.IpAddress))
	})
	return ret, err
}

// Get retrieves the IpAddress from the indexer for a given namespace and name.
func (s ipAddressNamespaceLister) Get(name string) (*v1.IpAddress, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("ipaddress"), name)
	}
	return obj.(*v1.IpAddress), nil
}
